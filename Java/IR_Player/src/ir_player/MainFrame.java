/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ir_player;

import com.github.sarxos.webcam.Webcam;
import java.awt.image.BufferedImage;

import javax.swing.Timer;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Graphics;
import java.util.List;
import java.awt.EventQueue;
import java.awt.Color;

/**
 *
 * @author hskinner
 */
public class MainFrame extends javax.swing.JFrame {

    public MainFrame() {
        initComponents();
        initCamera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        streamButton = new javax.swing.JToggleButton();
        exitButton = new javax.swing.JButton();
        outputBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        frameRateBox = new javax.swing.JTextField();
        imagePanel = new ir_player.CameraFeedPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        streamButton.setText("Stream");
        streamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streamButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        outputBox.setEditable(false);
        outputBox.setBackground(java.awt.Color.lightGray);
        outputBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        outputBox.setText("IR Player");

        jLabel1.setText("Frame Rate");

        frameRateBox.setEditable(false);
        frameRateBox.setText("<NaN>");

        imagePanel.setMaximumSize(new java.awt.Dimension(640, 480));
        imagePanel.setMinimumSize(new java.awt.Dimension(640, 480));
        imagePanel.setPreferredSize(new java.awt.Dimension(640, 480));

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(streamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exitButton)
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameRateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(streamButton)
                    .addComponent(exitButton)
                    .addComponent(outputBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(frameRateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void streamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streamButtonActionPerformed
        streaming = !streaming;
    }//GEN-LAST:event_streamButtonActionPerformed

    private static final int IMAGE_UPDATE_TIME = 100;
    private static final int ONE_SECOND        = 1000;
    private static final Color RECT_COLOR      = Color.RED;
    
    private boolean streaming = false;
    private int frameCtr = 0;
    private Webcam webcam;
    
    private void initCamera() {
        List<Webcam> webcams = Webcam.getWebcams();
        
        if (webcams.size() > 0) {
            webcam = webcams.get(0);
            webcam.open();
        }
        else
            outputBox.setText("ERROR: Could not find camera");
    }
    
    private synchronized void updateIfStreaming() {
        if (streaming) {
            BufferedImage img = webcam.getImage();
            Graphics g = imagePanel.getGraphics();
            g.setColor(RECT_COLOR);
            g.drawImage(img, 0, 0, null);
            g.drawRect(20, 20, 100, 100);
            ++frameCtr;
        }
    }
    
    private synchronized int retrieveClearFrameCtr() {
        int val = frameCtr;
        frameCtr = 0;
        return val;
    }
    
    private synchronized void updateFrameRate() {
        int frameCtr = retrieveClearFrameCtr();
        frameRateBox.setText(""+frameCtr);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        MainFrame mframe = new MainFrame();
        
        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                mframe.setVisible(true);
            }
        });
        
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                mframe.updateIfStreaming();
                EventQueue.invokeLater(this);
            }
        });
        
        new Timer(ONE_SECOND, new ActionListener() {
            public void actionPerformed(ActionEvent ev) {
                mframe.updateFrameRate();
            }
        }).start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField frameRateBox;
    private ir_player.CameraFeedPanel imagePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField outputBox;
    private javax.swing.JToggleButton streamButton;
    // End of variables declaration//GEN-END:variables
}
